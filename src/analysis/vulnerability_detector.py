"""
Vulnerability Detection Engine

Analyzes HAR files and RRE data to identify security vulnerabilities
and security misconfigurations.
"""

import re
import json
from typing import Dict, List, Any, Optional
from urllib.parse import urlparse, parse_qs
from dataclasses import dataclass

from .security_metrics import (
    VulnerabilityFinding, 
    VulnerabilityCategory, 
    SecurityLevel
)


@dataclass
class SecurityPattern:
    """Security pattern for vulnerability detection"""
    name: str
    pattern: str
    category: VulnerabilityCategory
    severity: SecurityLevel
    description: str
    cwe_id: Optional[str] = None
    cvss_score: Optional[float] = None
    remediation: Optional[str] = None


class VulnerabilityDetector:
    """Detects security vulnerabilities in HAR data and RRE analysis"""
    
    def __init__(self):
        self.security_patterns = self._initialize_security_patterns()
        
    def _initialize_security_patterns(self) -> List[SecurityPattern]:
        """Initialize security detection patterns"""
        return [
            # Authentication vulnerabilities
            SecurityPattern(
                name="Weak Password Policy",
                pattern=r"password.*=.*[a-zA-Z]{1,6}",
                category=VulnerabilityCategory.AUTHENTICATION,
                severity=SecurityLevel.HIGH,
                description="Weak password requirements detected",
                cwe_id="CWE-521",
                cvss_score=7.5
            ),
            
            SecurityPattern(
                name="Missing Authentication",
                pattern=r"api.*(user|admin|profile)",
                category=VulnerabilityCategory.AUTHENTICATION,
                severity=SecurityLevel.CRITICAL,
                description="API endpoints accessible without authentication",
                cwe_id="CWE-306",
                cvss_score=9.8
            ),
            
            # Authorization vulnerabilities
            SecurityPattern(
                name="IDOR Vulnerability",
                pattern=r"id=\d+.*user_id=\d+",
                category=VulnerabilityCategory.AUTHORIZATION,
                severity=SecurityLevel.HIGH,
                description="Potential Insecure Direct Object Reference",
                cwe_id="CWE-639",
                cvss_score=8.1
            ),
            
            # Data exposure vulnerabilities
            SecurityPattern(
                name="Sensitive Data in URL",
                pattern=r"(token|key|secret|password|api_key)=[^&]+",
                category=VulnerabilityCategory.DATA_EXPOSURE,
                severity=SecurityLevel.HIGH,
                description="Sensitive data exposed in URL parameters",
                cwe_id="CWE-200",
                cvss_score=7.5
            ),
            
            SecurityPattern(
                name="Personal Information Exposure",
                pattern=r"(email|phone|ssn|credit_card|address)=[^&]+",
                category=VulnerabilityCategory.DATA_EXPOSURE,
                severity=SecurityLevel.MEDIUM,
                description="Personal information exposed in requests",
                cwe_id="CWE-200",
                cvss_score=5.3
            ),
            
            # Injection vulnerabilities
            SecurityPattern(
                name="SQL Injection Pattern",
                pattern=r"[\"']\s*(union|select|insert|update|delete|drop|create)\s+",
                category=VulnerabilityCategory.INJECTION,
                severity=SecurityLevel.CRITICAL,
                description="Potential SQL injection in request parameters",
                cwe_id="CWE-89",
                cvss_score=9.8
            ),
            
            SecurityPattern(
                name="XSS Pattern",
                pattern=r"<script|javascript:|on\w+\s*=",
                category=VulnerabilityCategory.INJECTION,
                severity=SecurityLevel.HIGH,
                description="Potential Cross-Site Scripting",
                cwe_id="CWE-79",
                cvss_score=6.1
            ),
            
            # Configuration vulnerabilities
            SecurityPattern(
                name="Debug Information",
                pattern=r"(debug|test|dev|staging)",
                category=VulnerabilityCategory.CONFIGURATION,
                severity=SecurityLevel.MEDIUM,
                description="Development/debug information exposed",
                cwe_id="CWE-200",
                cvss_score=5.3
            ),
            
            SecurityPattern(
                name="Error Information",
                pattern=r"(error|exception|stack|trace)",
                category=VulnerabilityCategory.ERROR_HANDLING,
                severity=SecurityLevel.MEDIUM,
                description="Detailed error information exposed",
                cwe_id="CWE-209",
                cvss_score=5.3
            ),
            
            # API security
            SecurityPattern(
                name="Rate Limiting Missing",
                pattern=r"api.*(login|auth|register)",
                category=VulnerabilityCategory.API_SECURITY,
                severity=SecurityLevel.MEDIUM,
                description="API endpoints without rate limiting",
                cwe_id="CWE-770",
                cvss_score=5.3
            ),
            
            # Session management
            SecurityPattern(
                name="Weak Session ID",
                pattern=r"session.*=.*[a-zA-Z0-9]{1,8}",
                category=VulnerabilityCategory.SESSION_MANAGEMENT,
                severity=SecurityLevel.MEDIUM,
                description="Weak session identifier",
                cwe_id="CWE-330",
                cvss_score=5.3
            )
        ]
    
    def analyze_har_data(self, har_data: Dict[str, Any]) -> List[VulnerabilityFinding]:
        """Analyze HAR data for security vulnerabilities"""
        findings = []
        
        if 'log' not in har_data or 'entries' not in har_data['log']:
            return findings
        
        for entry in har_data['log']['entries']:
            request = entry.get('request', {})
            response = entry.get('response', {})
            
            # Analyze request URL and parameters
            url_findings = self._analyze_url(request.get('url', ''))
            findings.extend(url_findings)
            
            # Analyze request headers
            header_findings = self._analyze_headers(request.get('headers', []))
            findings.extend(header_findings)
            
            # Analyze request body
            body_findings = self._analyze_request_body(request)
            findings.extend(body_findings)
            
            # Analyze response headers
            response_header_findings = self._analyze_response_headers(response)
            findings.extend(response_header_findings)
            
            # Analyze response body for sensitive data
            response_body_findings = self._analyze_response_body(response)
            findings.extend(response_body_findings)
        
        return findings
    
    def _analyze_url(self, url: str) -> List[VulnerabilityFinding]:
        """Analyze URL for security vulnerabilities"""
        findings = []
        
        # Check for sensitive data in URL parameters
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        
        sensitive_params = ['token', 'key', 'secret', 'password', 'api_key', 
                          'auth', 'session', 'user_id', 'email']
        
        for param in sensitive_params:
            if param in query_params:
                findings.append(VulnerabilityFinding(
                    category=VulnerabilityCategory.DATA_EXPOSURE,
                    severity=SecurityLevel.HIGH,
                    title=f"Sensitive Parameter in URL: {param}",
                    description=f"The sensitive parameter '{param}' is exposed in the URL",
                    evidence=f"URL: {url}",
                    cwe_id="CWE-200",
                    cvss_score=7.5,
                    remediation="Use POST requests or secure headers for sensitive data"
                ))
        
        # Check for security patterns
        for pattern in self.security_patterns:
            if re.search(pattern.pattern, url, re.IGNORECASE):
                findings.append(VulnerabilityFinding(
                    category=pattern.category,
                    severity=pattern.severity,
                    title=pattern.name,
                    description=pattern.description,
                    evidence=f"URL: {url}",
                    cwe_id=pattern.cwe_id,
                    cvss_score=pattern.cvss_score,
                    remediation=pattern.remediation
                ))
        
        return findings
    
    def _analyze_headers(self, headers: List[Dict[str, str]]) -> List[VulnerabilityFinding]:
        """Analyze request headers for security issues"""
        findings = []
        header_dict = {h['name'].lower(): h['value'] for h in headers}
        
        # Check for missing security headers
        if 'user-agent' in header_dict:
            user_agent = header_dict['user-agent'].lower()
            if 'sqlmap' in user_agent or 'nikto' in user_agent or 'nmap' in user_agent:
                findings.append(VulnerabilityFinding(
                    category=VulnerabilityCategory.NETWORK,
                    severity=SecurityLevel.MEDIUM,
                    title="Security Scanner Detection",
                    description="Request appears to be from a security testing tool",
                    evidence=f"User-Agent: {header_dict['user-agent']}",
                    cwe_id="CWE-200",
                    cvss_score=3.1
                ))
        
        return findings
    
    def _analyze_request_body(self, request: Dict[str, Any]) -> List[VulnerabilityFinding]:
        """Analyze request body for security issues"""
        findings = []
        
        if 'postData' in request:
            post_data = request['postData']
            content_type = post_data.get('mimeType', '')
            
            if 'application/json' in content_type:
                try:
                    body_text = post_data.get('text', '{}')
                    body_json = json.loads(body_text)
                    findings.extend(self._analyze_json_data(body_json))
                except json.JSONDecodeError:
                    pass
            else:
                # Analyze form data
                body_text = post_data.get('text', '')
                findings.extend(self._analyze_text_data(body_text))
        
        return findings
    
    def _analyze_json_data(self, data: Any, path: str = "") -> List[VulnerabilityFinding]:
        """Recursively analyze JSON data for security issues"""
        findings = []
        
        if isinstance(data, dict):
            for key, value in data.items():
                current_path = f"{path}.{key}" if path else key
                
                # Check for sensitive keys
                if any(sensitive in key.lower() for sensitive in 
                       ['password', 'token', 'key', 'secret', 'auth']):
                    findings.append(VulnerabilityFinding(
                        category=VulnerabilityCategory.DATA_EXPOSURE,
                        severity=SecurityLevel.MEDIUM,
                        title="Sensitive Data in Request Body",
                        description=f"Sensitive field '{key}' found in request data",
                        evidence=f"Path: {current_path}",
                        cwe_id="CWE-200",
                        cvss_score=5.3,
                        remediation="Ensure sensitive data is properly encrypted"
                    ))
                
                findings.extend(self._analyze_json_data(value, current_path))
        
        elif isinstance(data, list):
            for i, item in enumerate(data):
                current_path = f"{path}[{i}]"
                findings.extend(self._analyze_json_data(item, current_path))
        
        return findings
    
    def _analyze_text_data(self, text: str) -> List[VulnerabilityFinding]:
        """Analyze text data for security patterns"""
        findings = []
        
        for pattern in self.security_patterns:
            if re.search(pattern.pattern, text, re.IGNORECASE):
                findings.append(VulnerabilityFinding(
                    category=pattern.category,
                    severity=pattern.severity,
                    title=pattern.name,
                    description=pattern.description,
                    evidence=f"Request body contains: {text[:100]}...",
                    cwe_id=pattern.cwe_id,
                    cvss_score=pattern.cvss_score,
                    remediation=pattern.remediation
                ))
        
        return findings
    
    def _analyze_response_headers(self, response: Dict[str, Any]) -> List[VulnerabilityFinding]:
        """Analyze response headers for security issues"""
        findings = []
        headers = response.get('headers', [])
        header_dict = {h['name'].lower(): h['value'] for h in headers}
        
        # Check for missing security headers
        security_headers = {
            'strict-transport-security': 'HSTS',
            'content-security-policy': 'CSP',
            'x-frame-options': 'X-Frame-Options',
            'x-content-type-options': 'X-Content-Type-Options',
            'x-xss-protection': 'X-XSS-Protection'
        }
        
        for header, name in security_headers.items():
            if header not in header_dict:
                findings.append(VulnerabilityFinding(
                    category=VulnerabilityCategory.CONFIGURATION,
                    severity=SecurityLevel.MEDIUM,
                    title=f"Missing Security Header: {name}",
                    description=f"The {name} security header is not set",
                    evidence=f"Response headers: {list(header_dict.keys())}",
                    cwe_id="CWE-693",
                    cvss_score=5.3,
                    remediation=f"Implement {name} header for enhanced security"
                ))
        
        # Check for weak security header values
        if 'x-frame-options' in header_dict:
            value = header_dict['x-frame-options']
            if value.lower() not in ['deny', 'sameorigin']:
                findings.append(VulnerabilityFinding(
                    category=VulnerabilityCategory.CONFIGURATION,
                    severity=SecurityLevel.LOW,
                    title="Weak X-Frame-Options Value",
                    description="X-Frame-Options header has weak value",
                    evidence=f"X-Frame-Options: {value}",
                    cwe_id="CWE-693",
                    cvss_score=3.1,
                    remediation="Use 'DENY' or 'SAMEORIGIN' for X-Frame-Options"
                ))
        
        return findings
    
    def _analyze_response_body(self, response: Dict[str, Any]) -> List[VulnerabilityFinding]:
        """Analyze response body for sensitive data exposure"""
        findings = []
        
        if 'content' in response and 'text' in response['content']:
            body_text = response['content']['text']
            
            # Check for error information
            if any(error_term in body_text.lower() for error_term in 
                   ['error', 'exception', 'stack trace', 'debug']):
                findings.append(VulnerabilityFinding(
                    category=VulnerabilityCategory.ERROR_HANDLING,
                    severity=SecurityLevel.MEDIUM,
                    title="Error Information Exposure",
                    description="Response contains detailed error information",
                    evidence=f"Response body contains error details: {body_text[:200]}...",
                    cwe_id="CWE-209",
                    cvss_score=5.3,
                    remediation="Implement proper error handling without exposing internal details"
                ))
            
            # Check for sensitive data patterns
            sensitive_patterns = [
                (r'password["\']?\s*[:=]\s*["\']?[^"\']+["\']?', 'Password exposure'),
                (r'api_key["\']?\s*[:=]\s*["\']?[^"\']+["\']?', 'API key exposure'),
                (r'token["\']?\s*[:=]\s*["\']?[^"\']+["\']?', 'Token exposure'),
                (r'secret["\']?\s*[:=]\s*["\']?[^"\']+["\']?', 'Secret exposure')
            ]
            
            for pattern, description in sensitive_patterns:
                if re.search(pattern, body_text, re.IGNORECASE):
                    findings.append(VulnerabilityFinding(
                        category=VulnerabilityCategory.DATA_EXPOSURE,
                        severity=SecurityLevel.HIGH,
                        title=description,
                        description=f"Response contains {description.lower()}",
                        evidence=f"Response body: {body_text[:200]}...",
                        cwe_id="CWE-200",
                        cvss_score=7.5,
                        remediation="Remove sensitive data from responses"
                    ))
        
        return findings
    
    def analyze_rre_data(self, rre_data: Dict[str, Any]) -> List[VulnerabilityFinding]:
        """Analyze RRE analysis data for additional security insights"""
        findings = []
        
        # This would analyze the output from RRE analysis
        # For now, return empty list - can be extended based on RRE output format
        return findings 